b1  = forward
b2  = pause
b3  = back/play
b4  = rewind
tx1 = small text time in 
tx2 = small text total time
tx3 = medium text name

package com.example.mediaplayer;

import android.content.Context;
import android.media.MediaMetadataRetriever;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.os.Handler;
import android.view.View;
import android.widget.Button;
import android.widget.SeekBar;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;

import java.util.ArrayList;
import java.util.Locale;
import java.util.concurrent.TimeUnit;

public class MainActivity extends AppCompatActivity {

    private Button mPlay;
    private Button mPause;
    private Button mStop;
    private Button mSkip;
    private Button mPrevious;
    private Button mVolUP;
    private Button mVolDown;
    private TextView mTitle;
    private TextView mArtist;
    private TextView mLength;
    private TextView mCurrentTime;

    private MediaPlayer mediaPlayer;

    private double startTime = 0;
    private double finalTime = 0;
    private int index = 0;

    private Handler myHandler = new Handler();
    private SeekBar seekBar;

    private static final String TAG = "MyActivity";
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Initialize references to the Views
        mPlay = (Button) findViewById(R.id.play);
        mPause = (Button) findViewById(R.id.pause);
        mStop = (Button) findViewById(R.id.stop);
        mSkip = (Button) findViewById(R.id.skip);
        mPrevious = (Button) findViewById(R.id.previous);
        mVolUP = (Button) findViewById(R.id.volUP);
        mVolDown =(Button) findViewById(R.id.volDOWN);
        mTitle = (TextView) findViewById(R.id.title);
        mLength = (TextView) findViewById(R.id.length);
        mCurrentTime = (TextView) findViewById(R.id.currentTime);

        final ArrayList<Integer> list;
        list = new ArrayList<>();
        // Add mp3 files to the array list
        list.add(R.raw.acid_rain7);
        list.add(R.raw.misty_instrumental8);
        list.add(R.raw.wo_qui_non_coin);

        Context context = this;
        AudioModel.create(context, list);


        mediaPlayer = MediaPlayer.create(this, list.get(index));
        mPause.setEnabled(false);
        final MediaMetadataRetriever metadataRetriever = new MediaMetadataRetriever();

        mPlay.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                mediaPlayer.start();
                String title = "null";
                title = metadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_TITLE);
                mTitle.setText(title);

                mCurrentTime.setText(String.format(Locale.getDefault(),"%d min %d sec",
                        TimeUnit.MILLISECONDS.toMinutes((long) startTime),
                        TimeUnit.MILLISECONDS.toSeconds((long) startTime) -
                                TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes((long) startTime)))
                );

                mLength.setText(String.format(Locale.getDefault(), "%d min %d sec",
                        TimeUnit.MILLISECONDS.toMinutes((long) finalTime),
                        TimeUnit.MILLISECONDS.toSeconds((long) finalTime) -
                        TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes((long) finalTime)))
                );

                myHandler.postDelayed(UpdateSongTime, 100);
                mPause.setEnabled(true);
                mPlay.setEnabled(false);
            }
        });

        mPause.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                mediaPlayer.pause();
                mPause.setEnabled(false);
                mPlay.setEnabled(true);
            }
        });

        mPrevious.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                int counter = index--;
                mediaPlayer.reset();
                
            }
        });



    }

    private Runnable UpdateSongTime = new Runnable() {
        public void run() {
            startTime = mediaPlayer.getCurrentPosition();
            mCurrentTime.setText(String.format(Locale.getDefault(), "%d min, %d sec",
                    TimeUnit.MILLISECONDS.toMinutes((long) startTime),
                    TimeUnit.MILLISECONDS.toSeconds((long) startTime) -
                            TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.
                                    toMinutes((long) startTime)))
            );
//            seekbar.setProgress((int)startTime);
            myHandler.postDelayed(this, 100);
        }
    };
}
